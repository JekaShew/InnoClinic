
services:
  authorization.web:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5000
    image: authorizationapi
    container_name: AuthorizationAPI-microsrervice
    build:
      context: .
      args:
      - BUILD_CONFIGURATION=Development
      dockerfile: AuthorizationAPI/AuthorizationAPI.Web/Dockerfile
    ports:
    -  "5000:5000"
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
      smtp4dev:
        condition: service_started
      seqlogs:
        condition: service_started
      mssql-server:
        condition: service_healthy
        restart: true

  offices.web:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5001
    image: officesapi
    container_name: OfficesAPI-microsrervice
    build:
      context: .
      args:
      - BUILD_CONFIGURATION=Development
      dockerfile: OfficesAPI/OfficesAPI.Web/Dockerfile
    ports:
    - "5001:5001"
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
      seqlogs:
        condition: service_started
      rabbit-mq:
        condition: service_healthy
      authorization.web:
        condition: service_started

  profiles.web:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5002
    image: profilesapi
    container_name: ProfilesAPI-microsrervice
    build:
      context: .
      args:
      - BUILD_CONFIGURATION=Development
      dockerfile: ProfilesAPI/ProfilesAPI.Web/Dockerfile
    ports:
    - "5002:5002"
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
      seqlogs:
        condition: service_started
      rabbit-mq:
        condition: service_healthy
      profiles-azure-blob-storage:
        condition: service_started
      offices.web:
        condition: service_started
      services.web:
       condition: service_started
      authorization.web:
        condition: service_started
   
  services.web:
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_HTTP_PORTS=5003
    image: servicesapi
    container_name: ServicesAPI-microsrervice
    build:
      context: .
      args:
      - BUILD_CONFIGURATION=Development
      dockerfile: ServicesAPI/ServicesAPI.Web/Dockerfile
    ports:
    - "5003:5003"
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
      seqlogs:
        condition: service_started
      rabbit-mq:
       condition: service_healthy
      authorization.web:
        condition: service_started
      postgressql-server:
        condition: service_healthy
        
  mssql-server:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: mssql-server-database
    user: root
    environment: 
      - ACCEPT_EULA=Y
      - SA_USERNAME=sa
      - SA_PASSWORD=SecretPassword123
    volumes:
    - ./.containers/sqlserver/data:/var/opt/mssql/data
    - ./.containers/sqlserver/log:/var/opt/mssql/log
    ports: 
    - "1433:1433"
    restart: always
    healthcheck:
      test: /opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P "SecretPassword123" -Q "SELECT 1" || exit 1
      interval: 10s
      timeout: 7s
      retries: 7
      start_period: 15s

  postgressql-server:
    image: postgres:latest
    container_name: postgressql-server-database
    user: root
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: SecretPassword321
      # POSTGRES_DATABASE: ServicesDB
    volumes:
      - ./.containers/postgres/data:/var/lib/postgresql/data
      - ./.containers/postgres/log:/var/log/postgresql
      - postgresDB-data:/var/lib/postgresql/data
      - postgresDB-log:/var/log/postgresql
    ports:
      - "5432:5432"
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  profiles-azure-blob-storage:
    image: mcr.microsoft.com/azure-storage/azurite:latest
    container_name: profiles.azure-blob-storage
    volumes:
    - ./.containers/azure-blob-storage:/data
    ports:
    - "10000:10000"
    command: "azurite-blob --blobHost 0.0.0.0 -l /data"
  
  smtp4dev:
    image: rnwood/smtp4dev:v3
    container_name: smtp4dev-email-server
    restart: always
    ports:
      # Change the number before : to the port the web interface should be accessible on
      - '8000:80'
      # Change the number before : to the port the SMTP server should be accessible on
      - '25:25'
      # Change the number before : to the port the IMAP server should be accessible on
      - '143:143'
    volumes:
      # This is where smtp4dev stores the database..
        - ./.containers/smtp4dev-data:/smtp4dev
    environment:
      #Specifies the virtual path from web server root where SMTP4DEV web interface will be hosted. e.g. "/" or "/smtp4dev"
      # - ServerOptions__BasePath=/smtp4dev
      # - ServerOptions__Database=database.db
      #Specifies the URLs the web UI will use inside the container.
      - ServerOptions__Urls=http://*:80

      #Specifies the server hostname. Used in auto-generated TLS certificate if enabled.
      - ServerOptions__HostName=smtp4dev

  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.10.2"
    container_name: elasticsearch-logs
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      node.name: elasticsearch
      discovery.seed_hosts: elasticsearch
      cluster.initial_master_nodes: elasticsearch
      cluster.name: mycluster
      bootstrap.memory_lock: "true"
      ES_JAVA_OPTS: -Xms256m -Xmx256m
    volumes:
      - ".containers/elasticsearch/es-data-elasticsearch:/var/lib/elasticsearch/data"
    networks:
      - elastic
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:9200"]
      interval: 15s
      timeout: 10s
      retries: 20

  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: kibana-logsearch
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200 
      - 'ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]'
    networks:
      - elastic
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:5601"]
      interval: 15s
      timeout: 10s
      retries: 20  

  seqlogs:
    image: datalust/seq:latest
    container_name: seq-logs
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "8081:80"
      - "5341:5341"
    volumes:
      - ./.containers/seq/data:/data

  rabbit-mq:
    image: rabbitmq:management
    container_name: rabbitmq-messagebroker
    ports:
      - '15672:15672'
      - '5672:5672'
    hostname: innoclinic-rabbitmq
    volumes:
      - ./.containers/rabbitmq/data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest" 
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 20s
      timeout: 10s
      retries: 10

  redis:
    image: redis:latest
    container_name: redis-cache
    ports:
      - "6379:6379"
    volumes:
      - ./.containers/redis/data:/data
    restart: always 
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5
      start_period: 30s

volumes:
  es-data-elasticsearch:
    driver: local
  postgresDB-data:
  postgresDB-log:

networks: 
  elastic:
    driver: bridge