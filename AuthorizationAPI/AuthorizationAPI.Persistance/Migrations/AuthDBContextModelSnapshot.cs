// <auto-generated />
using System;
using AuthorizationAPI.Persistance.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthorizationAPI.Persistance.Migrations
{
    [DbContext(typeof(AuthDBContext))]
    partial class AuthDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorizationAPI.Domain.Data.Models.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("AuthorizationAPI.Domain.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73b795d3-4917-4219-a1a0-044fcc6606ea"),
                            Description = "The role Administrator gives full admin rights.",
                            Title = "Administrator"
                        },
                        new
                        {
                            Id = new Guid("cefa7c0e-23ef-4c48-8696-b894be96bc68"),
                            Description = "The role Receptionist gives semi full admin rights to manage Clinic's Registry.",
                            Title = "Receptionist"
                        },
                        new
                        {
                            Id = new Guid("0eec148a-43d6-4b32-afb6-1ecf3341be6d"),
                            Description = "The role Doctor gives some administrative rights.",
                            Title = "Doctor"
                        },
                        new
                        {
                            Id = new Guid("78b25fdf-7199-4066-b677-5bc465bc3d1a"),
                            Description = "The role Patient gives small client rigts.",
                            Title = "Patient"
                        });
                });

            modelBuilder.Entity("AuthorizationAPI.Domain.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecondName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecretPhraseHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AuthorizationAPI.Domain.Data.Models.UserStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("UserStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b9f67cf2-60de-48eb-82d0-8a5d6cde1b0f"),
                            Description = "The Activated user status means that user has been already activated.",
                            Title = "Activated"
                        },
                        new
                        {
                            Id = new Guid("a780b7f4-3c8b-4452-a426-e7abc1a46949"),
                            Description = "The Non-Activated user status means that user hasn't been activated yet.",
                            Title = "Non-Activated"
                        },
                        new
                        {
                            Id = new Guid("6c6feeba-0919-4266-b2d1-9f5b724db31a"),
                            Description = "The Deleted user status means that User Deleted their account.",
                            Title = "Deleted"
                        },
                        new
                        {
                            Id = new Guid("7b31946c-6d14-44dc-9f93-3a4c06db902e"),
                            Description = "The Banned user status means that User was Banned by Administrator for some action.",
                            Title = "Banned"
                        });
                });

            modelBuilder.Entity("AuthorizationAPI.Domain.Data.Models.RefreshToken", b =>
                {
                    b.HasOne("AuthorizationAPI.Domain.Data.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthorizationAPI.Domain.Data.Models.User", b =>
                {
                    b.HasOne("AuthorizationAPI.Domain.Data.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AuthorizationAPI.Domain.Data.Models.UserStatus", "UserStatus")
                        .WithMany("Users")
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("AuthorizationAPI.Domain.Data.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AuthorizationAPI.Domain.Data.Models.User", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("AuthorizationAPI.Domain.Data.Models.UserStatus", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
